// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: visit.proto

package main

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Visit struct {
	PictureId            string   `protobuf:"bytes,1,opt,name=PictureId,proto3" json:"PictureId,omitempty"`
	Quality              float32  `protobuf:"fixed32,2,opt,name=Quality,proto3" json:"Quality,omitempty"`
	VisitTime            uint64   `protobuf:"varint,3,opt,name=VisitTime,proto3" json:"VisitTime,omitempty"`
	Shop                 uint64   `protobuf:"varint,4,opt,name=Shop,proto3" json:"Shop,omitempty"`
	Position             uint32   `protobuf:"varint,5,opt,name=Position,proto3" json:"Position,omitempty"`
	Uid                  uint64   `protobuf:"varint,6,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Age                  uint32   `protobuf:"varint,7,opt,name=Age,proto3" json:"Age,omitempty"`
	Gender               uint32   `protobuf:"varint,8,opt,name=Gender,proto3" json:"Gender,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Visit) Reset()         { *m = Visit{} }
func (m *Visit) String() string { return proto.CompactTextString(m) }
func (*Visit) ProtoMessage()    {}
func (*Visit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a498f0e5194d943b, []int{0}
}
func (m *Visit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visit.Merge(m, src)
}
func (m *Visit) XXX_Size() int {
	return m.Size()
}
func (m *Visit) XXX_DiscardUnknown() {
	xxx_messageInfo_Visit.DiscardUnknown(m)
}

var xxx_messageInfo_Visit proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Visit)(nil), "main.Visit")
}

func init() { proto.RegisterFile("visit.proto", fileDescriptor_a498f0e5194d943b) }

var fileDescriptor_a498f0e5194d943b = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xbb, 0x6d, 0x9a, 0xb6, 0x53, 0x04, 0x59, 0x44, 0x86, 0x22, 0x21, 0x78, 0xca, 0x29,
	0x1e, 0x3c, 0x7a, 0xb2, 0x17, 0xf1, 0x16, 0xe3, 0x9f, 0x7b, 0x6c, 0xd6, 0x38, 0x90, 0xee, 0x84,
	0x64, 0x2b, 0xf8, 0x4d, 0xfc, 0x48, 0xf5, 0xe6, 0x47, 0xd0, 0xf8, 0x45, 0x64, 0x47, 0x6d, 0x6f,
	0xef, 0xfd, 0xde, 0xdb, 0x65, 0x78, 0x30, 0x7f, 0xa1, 0x8e, 0x5c, 0xda, 0xb4, 0xec, 0x58, 0x07,
	0xeb, 0x82, 0xec, 0xe2, 0xa8, 0xe2, 0x8a, 0x05, 0x9c, 0x79, 0xf5, 0x9b, 0x9d, 0xbe, 0x2b, 0x18,
	0x3f, 0xf8, 0xae, 0x3e, 0x81, 0x59, 0x46, 0x2b, 0xb7, 0x69, 0xcd, 0x75, 0x89, 0x2a, 0x56, 0xc9,
	0x2c, 0xdf, 0x03, 0x8d, 0x30, 0xb9, 0xd9, 0x14, 0x35, 0xb9, 0x57, 0x1c, 0xc6, 0x2a, 0x19, 0xe6,
	0xff, 0xd6, 0xbf, 0x93, 0x0f, 0xee, 0x68, 0x6d, 0x70, 0x14, 0xab, 0x24, 0xc8, 0xf7, 0x40, 0x6b,
	0x08, 0x6e, 0x9f, 0xb9, 0xc1, 0x40, 0x02, 0xd1, 0x7a, 0x01, 0xd3, 0x8c, 0x3b, 0x72, 0xc4, 0x16,
	0xc7, 0xb1, 0x4a, 0x0e, 0xf2, 0x9d, 0xd7, 0x87, 0x30, 0xba, 0xa7, 0x12, 0x43, 0xa9, 0x7b, 0xe9,
	0xc9, 0x65, 0x65, 0x70, 0x22, 0x45, 0x2f, 0xf5, 0x31, 0x84, 0x57, 0xc6, 0x96, 0xa6, 0xc5, 0xa9,
	0xc0, 0x3f, 0xb7, 0xbc, 0xd8, 0x7e, 0x45, 0x83, 0x6d, 0x1f, 0xa9, 0x8f, 0x3e, 0x52, 0x9f, 0x7d,
	0xa4, 0xde, 0xbe, 0xa3, 0x01, 0xe0, 0xca, 0xa6, 0x64, 0x9f, 0xc8, 0x92, 0xdf, 0x84, 0x6d, 0xca,
	0x75, 0xd1, 0xa4, 0xc6, 0xd5, 0xcb, 0xb9, 0x9c, 0x99, 0xf9, 0x1d, 0xba, 0xc7, 0x50, 0xf6, 0x38,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x09, 0x48, 0x68, 0x3b, 0x3a, 0x01, 0x00, 0x00,
}

func (m *Visit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PictureId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVisit(dAtA, i, uint64(len(m.PictureId)))
		i += copy(dAtA[i:], m.PictureId)
	}
	if m.Quality != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Quality))))
		i += 4
	}
	if m.VisitTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.VisitTime))
	}
	if m.Shop != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.Shop))
	}
	if m.Position != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.Position))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.Uid))
	}
	if m.Age != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.Age))
	}
	if m.Gender != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.Gender))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintVisit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Visit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PictureId)
	if l > 0 {
		n += 1 + l + sovVisit(uint64(l))
	}
	if m.Quality != 0 {
		n += 5
	}
	if m.VisitTime != 0 {
		n += 1 + sovVisit(uint64(m.VisitTime))
	}
	if m.Shop != 0 {
		n += 1 + sovVisit(uint64(m.Shop))
	}
	if m.Position != 0 {
		n += 1 + sovVisit(uint64(m.Position))
	}
	if m.Uid != 0 {
		n += 1 + sovVisit(uint64(m.Uid))
	}
	if m.Age != 0 {
		n += 1 + sovVisit(uint64(m.Age))
	}
	if m.Gender != 0 {
		n += 1 + sovVisit(uint64(m.Gender))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVisit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVisit(x uint64) (n int) {
	return sovVisit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Visit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVisit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Visit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Visit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVisit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Quality = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitTime", wireType)
			}
			m.VisitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shop", wireType)
			}
			m.Shop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shop |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVisit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVisit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVisit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVisit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVisit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVisit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVisit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVisit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVisit   = fmt.Errorf("proto: integer overflow")
)
